name: Project Horizon CI

on:
  push:
    branches: [ main, staging, dev ]
  pull_request:
    branches: [ main, staging, dev ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics --exclude=adhoc/archived/,venv/
          
      - name: Check formatting with black
        run: |
          black --check --exclude "/(\.git|\.github|venv|adhoc\/archived)/" .
          
      - name: Check imports with isort
        run: |
          isort --check --profile black --skip adhoc/archived --skip venv .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        test-group: [unit, integration, e2e]
        include:
          - test-group: unit
            path: tests/unit/
            always-run: true
          - test-group: integration
            path: tests/integration/
            always-run: false
          - test-group: e2e
            path: tests/e2e/
            always-run: false
            
    # Only run integration and e2e tests on specific branches or explicitly triggered workflows
    if: >
      matrix.always-run == true ||
      github.event_name == 'workflow_dispatch' ||
      (matrix.test-group == 'integration' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && (github.base_ref == 'staging' || github.base_ref == 'main'))) ||
      (matrix.test-group == 'e2e' && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'))
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          
      - name: Run ${{ matrix.test-group }} tests with pytest
        run: |
          pytest ${{ matrix.path }} --cov=src --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage
          fail_ci_if_error: false

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          
      - name: Build package
        run: |
          python -m build
          
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/
            
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
      - name: Deploy to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          echo "Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} environment"
          # Deployment commands would go here
          # For example:
          # - Copy to server
          # - Update Docker containers
          # - Run database migrations
          # - etc. 